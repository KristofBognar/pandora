function data = read_maxdoas_table_pandora(path, filename)
%read_maxdoas_table_pandora(path, filename)
% Read QDOAS output for pandora data
% Auto-generated by MATLAB 

%% Initialize variables.
delimiter = '\t';
startRow = 3;
endRow = inf;

%% Open the text file.
try
    fileID = fopen([path filename],'r');
catch
    error(['Invalid filename ' path filename]);
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

dateFormats = {'dd/MM/yyyy', 'HH:mm:ss'};
dateFormatIndex = 1;
blankDates = cell(1,size(raw,2));
anyBlankDates = false(size(raw,1),1);
invalidDates = cell(1,size(raw,2));
anyInvalidDates = false(size(raw,1),1);
for col=[9,10]% Convert the contents of columns with dates to MATLAB datetimes using date format string.
    try
        dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[9,10]}, 'InputFormat', dateFormats{col==[9,10]}); %#ok<SAGROW>
    catch
        try
            % Handle dates surrounded by quotes
            dataArray{col} = cellfun(@(x) x(2:end-1), dataArray{col}, 'UniformOutput', false);
            dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[9,10]}, 'InputFormat', dateFormats{col==[9,10]}); %%#ok<SAGROW>
        catch
            dates{col} = repmat(datetime([NaN NaN NaN]), size(dataArray{col})); %#ok<SAGROW>
        end
    end
    
    dateFormatIndex = dateFormatIndex + 1;
    blankDates{col} = cellfun(@isempty, dataArray{col});
    anyBlankDates = blankDates{col} | anyBlankDates;
    invalidDates{col} = isnan(dates{col}.Hour) - blankDates{col};
    anyInvalidDates = invalidDates{col} | anyInvalidDates;
end
dates = dates(:,[9,10]);
blankDates = blankDates(:,[9,10]);
invalidDates = invalidDates(:,[9,10]);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78]);

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
data = table;
data.SpecNo = cell2mat(rawNumericColumns(:, 1));
data.Year = cell2mat(rawNumericColumns(:, 2));
data.Fractionalday = cell2mat(rawNumericColumns(:, 3));
data.Fractionaltime = cell2mat(rawNumericColumns(:, 4));
data.SZA = cell2mat(rawNumericColumns(:, 5));
data.SolarAzimuthAngle = cell2mat(rawNumericColumns(:, 6));
data.Elevviewingangle = cell2mat(rawNumericColumns(:, 7));
data.Azimviewingangle = cell2mat(rawNumericColumns(:, 8));
data.DateDDMMYYYY = dates{:, 1};
data.Timehhmmss = dates{:, 2};

data.Timehhmmss=data.DateDDMMYYYY+timeofday(data.Timehhmmss);
data.DateTime=data.Timehhmmss;

data.Timehhmmss.Format='HH:mm:ss';
data.DateTime.Format='dd/MM/uuuu HH:mm:ss';

data.Tint = cell2mat(rawNumericColumns(:, 9));
data.TotalExperimentTimesec = cell2mat(rawNumericColumns(:, 10));
data.O3_VisRMS = cell2mat(rawNumericColumns(:, 11));
data.O3_VisRefZm = cell2mat(rawNumericColumns(:, 12));
data.O3_VisSpikeremoval = cell2mat(rawNumericColumns(:, 13));
data.O3_VisSlColo3 = cell2mat(rawNumericColumns(:, 14));
data.O3_VisSlErro3 = cell2mat(rawNumericColumns(:, 15));
data.O3_VisSlColo3a = cell2mat(rawNumericColumns(:, 16));
data.O3_VisSlErro3a = cell2mat(rawNumericColumns(:, 17));
data.O3_VisSlColno2 = cell2mat(rawNumericColumns(:, 18));
data.O3_VisSlErrno2 = cell2mat(rawNumericColumns(:, 19));
data.O3_VisSlColno2a = cell2mat(rawNumericColumns(:, 20));
data.O3_VisSlErrno2a = cell2mat(rawNumericColumns(:, 21));
data.O3_VisSlColo4 = cell2mat(rawNumericColumns(:, 22));
data.O3_VisSlErro4 = cell2mat(rawNumericColumns(:, 23));
data.O3_VisSlColh2o = cell2mat(rawNumericColumns(:, 24));
data.O3_VisSlErrh2o = cell2mat(rawNumericColumns(:, 25));
data.O3_VisSlColring = cell2mat(rawNumericColumns(:, 26));
data.O3_VisSlErrring = cell2mat(rawNumericColumns(:, 27));
data.O3_VisShiftSpectrum = cell2mat(rawNumericColumns(:, 28));
data.O3_VisStretchSpectrum1 = cell2mat(rawNumericColumns(:, 29));
data.O3_VisStretchSpectrum2 = cell2mat(rawNumericColumns(:, 30));
data.NO2_VisRMS = cell2mat(rawNumericColumns(:, 31));
data.NO2_VisRefZm = cell2mat(rawNumericColumns(:, 32));
data.NO2_VisSpikeremoval = cell2mat(rawNumericColumns(:, 33));
data.NO2_VisSlColo3 = cell2mat(rawNumericColumns(:, 34));
data.NO2_VisSlErro3 = cell2mat(rawNumericColumns(:, 35));
data.NO2_VisSlColno2 = cell2mat(rawNumericColumns(:, 36));
data.NO2_VisSlErrno2 = cell2mat(rawNumericColumns(:, 37));
data.NO2_VisSlColno2a = cell2mat(rawNumericColumns(:, 38));
data.NO2_VisSlErrno2a = cell2mat(rawNumericColumns(:, 39));
data.NO2_VisSlColo4 = cell2mat(rawNumericColumns(:, 40));
data.NO2_VisSlErro4 = cell2mat(rawNumericColumns(:, 41));
data.NO2_VisSlColh2o = cell2mat(rawNumericColumns(:, 42));
data.NO2_VisSlErrh2o = cell2mat(rawNumericColumns(:, 43));
data.NO2_VisSlColring = cell2mat(rawNumericColumns(:, 44));
data.NO2_VisSlErrring = cell2mat(rawNumericColumns(:, 45));
data.NO2_VisShiftSpectrum = cell2mat(rawNumericColumns(:, 46));
data.NO2_VisStretchSpectrum1 = cell2mat(rawNumericColumns(:, 47));
data.NO2_VisStretchSpectrum2 = cell2mat(rawNumericColumns(:, 48));
data.HCHORMS = cell2mat(rawNumericColumns(:, 49));
data.HCHORefZm = cell2mat(rawNumericColumns(:, 50));
data.HCHOSpikeremoval = cell2mat(rawNumericColumns(:, 51));
data.HCHOSlColhcho = cell2mat(rawNumericColumns(:, 52));
data.HCHOSlErrhcho = cell2mat(rawNumericColumns(:, 53));
data.HCHOSlColno2 = cell2mat(rawNumericColumns(:, 54));
data.HCHOSlErrno2 = cell2mat(rawNumericColumns(:, 55));
data.HCHOSlColo3 = cell2mat(rawNumericColumns(:, 56));
data.HCHOSlErro3 = cell2mat(rawNumericColumns(:, 57));
data.HCHOSlColo3a = cell2mat(rawNumericColumns(:, 58));
data.HCHOSlErro3a = cell2mat(rawNumericColumns(:, 59));
data.HCHOSlColo4 = cell2mat(rawNumericColumns(:, 60));
data.HCHOSlErro4 = cell2mat(rawNumericColumns(:, 61));
data.HCHOSlColbro = cell2mat(rawNumericColumns(:, 62));
data.HCHOSlErrbro = cell2mat(rawNumericColumns(:, 63));
data.HCHOSlColring = cell2mat(rawNumericColumns(:, 64));
data.HCHOSlErrring = cell2mat(rawNumericColumns(:, 65));
data.HCHOShiftSpectrum = cell2mat(rawNumericColumns(:, 66));
data.HCHOStretchSpectrum1 = cell2mat(rawNumericColumns(:, 67));
data.HCHOStretchSpectrum2 = cell2mat(rawNumericColumns(:, 68));
data.Fluxes330 = cell2mat(rawNumericColumns(:, 69));
data.Fluxes340 = cell2mat(rawNumericColumns(:, 70));
data.Fluxes350 = cell2mat(rawNumericColumns(:, 71));
data.Fluxes380 = cell2mat(rawNumericColumns(:, 72));
data.Fluxes440 = cell2mat(rawNumericColumns(:, 73));
data.Fluxes450 = cell2mat(rawNumericColumns(:, 74));
data.Fluxes500 = cell2mat(rawNumericColumns(:, 75));
data.Fluxes550 = cell2mat(rawNumericColumns(:, 76));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% data.DateDDMMYYYY=datenum(data.DateDDMMYYYY);
% data.Timehhmmss=datenum(data.Timehhmmss);

% round angles
data.Elevviewingangle=round(data.Elevviewingangle);

% filter obviously wrong dSCDs
data(data.NO2_VisSlColno2>1e25,:)=[];


% save using same name
tmp=strsplit(filename,'.');
savename=[tmp{1} '.mat'];

save([path savename], 'data');



